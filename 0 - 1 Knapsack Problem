https://practice.geeksforgeeks.org/problems/0-1-knapsack-problem0945/1

MEMOISATION METHOD-
class Solution 
{ 
    //Function to return max value that can be put in knapsack of capacity W.
    static int[][] dp=new int[1001][1001];
    static int knapSack(int W, int wt[], int val[], int n) {
        for(int[] x : dp){
           Arrays.fill(x,-1);
       }
        knapSackdp(dp,W,wt,val,n);
        return dp[n][W];
    }
    
    static int knapSackdp(int[][] dp, int W, int wt[], int val[], int n) 
    { 
         // your code here 
         
         if(n==0 || W==0){
             return dp[n][W]=0;
         }
         if(dp[n][W]!=-1){
             return dp[n][W];
         }
         if(wt[n-1]<=W){
             return dp[n][W]=Math.max(val[n-1]+knapSackdp(dp,W-wt[n-1],wt,val,n-1),knapSackdp(dp,W,wt,val,n-1));
         }else{
          return dp[n][W]=knapSackdp(dp,W,wt,val,n-1);
         }
          
    } 
}

Tabulation method- same time complexity as memoisation

class Solution 
{ 
    //Function to return max value that can be put in knapsack of capacity W
    //Tabulation method
    static int knapSack(int W, int wt[], int val[], int n) {
        int[][] dp=new int[n+1][W+1];
        for(int i=0;i<n+1;i++){
           dp[i][0]=0;
       }
       for(int j=0;j<W+1;j++){
           dp[0][j]=0;
       }
       for(int i=1;i<n+1;i++){
           for(int j=1;j<W+1;j++){
               if(wt[i-1]<=j){
                   dp[i][j]=Math.max(val[i-1]+dp[i-1][j-wt[i-1]],dp[i-1][j]);
               }else{
                   dp[i][j]=dp[i-1][j];
               }
               
           }
           
       }
        return dp[n][W];
    }
}

