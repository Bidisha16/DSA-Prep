https://leetcode.com/problems/longest-common-subsequence/
using recursion+memoisation

class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int n=text1.length();
        int m=text2.length();
        int[][] recur=new int[n+1][m+1];
        for(int i=0;i<n+1;i++){
            for(int j=0;j<m+1;j++){
                recur[i][j]=-1;
            }
        }
        int count=0;
        count=LCS(text1,text2,n,m,recur);
        return count;
    }
    public int LCS(String text1, String text2, int n,int m, int[][] recur){
        if(m==0 || n==0){
            return 0;
        }
        if(recur[n][m]!=-1){
            return recur[n][m];
        }
        if(text1.charAt(n-1)==text2.charAt(m-1)){
            return recur[n][m]=1+LCS(text1,text2,n-1,m-1,recur);
        }
        return recur[n][m]=Math.max(LCS(text1,text2,n-1,m,recur),LCS(text1,text2,n,m-1,recur));
    }
}
