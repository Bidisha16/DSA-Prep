https://practice.geeksforgeeks.org/problems/implementing-dijkstra-set-1-adjacency-matrix/1

class Node implements Comparator<Node>{
    private int V;
    private int weight;
    Node(int V, int weight){
        this.V=V;
        this.weight=weight;
    }
    Node(){ };
    int getV(){
        return V;
        
    }
    int getWeight(){
        return weight;
    }
    public int compare(Node n1, Node n2){
        if(n1.weight<n2.weight){
            return -1;
        }
        else if(n1.weight>n2.weight){
            return 1;
        }
        return 0;
    }
}
class Solution
{
    //Function to find the shortest distance of all the vertices
    //from the source vertex S.
    static int[] dijkstra(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj, int S)
    {
        // Write your code here
        PriorityQueue<Node> pq=new PriorityQueue<Node>(V, new Node());
        int[] dis=new int[V];
        Arrays.fill(dis, Integer.MAX_VALUE);
        dis[S]=0;
        pq.add(new Node(S,0));
        while(!pq.isEmpty()){
            Node node=pq.poll();
            for(ArrayList<Integer> itr:adj.get(node.getV())){
                int W=itr.get(1);

                int vertex=itr.get(0);
                if(dis[vertex]>W+dis[node.getV()]){
                    dis[vertex]=W+dis[node.getV()];
                    pq.add(new Node(vertex,dis[vertex]));
                    
                }
            }
        }
        return dis;
    }
}
