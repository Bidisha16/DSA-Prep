https://practice.geeksforgeeks.org/problems/inversion-of-array-1587115620/1
Time Complexity: O(NLogN).
Auxiliary Space: O(N).
class Solution
{
    // arr[]: Input Array
    // N : Size of the Array arr[]
    //Function to count inversions in the array.
    static long inversionCount(long arr[], long N)
    {
        // Your Code Here
        long res=0;
        long[] temp=new long[(int)N];
        res=MergeSort(arr,temp,0,N-1);
        return res;
    }
    static long MergeSort(long arr[], long temp[], long left, long right){
        long count=0;
        long mid=0;
        if(left<right){
            mid=(left+right)/2;
            count+=MergeSort(arr,temp,left,mid);
            count+=MergeSort(arr,temp,mid+1,right);
            count+=Merge(arr,temp,left,mid+1,right);
        }
        return count;
    }
    static long Merge(long arr[], long temp[], long left, long mid, long right){
        long i=left;
        long j=mid;
        long k=left;
        long count=0;
        while((i<=(mid-1)) && (j<=right)){
            if(arr[(int)i]<=arr[(int)j]){
                temp[(int)k++]=arr[(int)i++];
            }else{
                temp[(int)k++]=arr[(int)j++];
                count+=(mid-i);
            }
        }
            while(i <= (mid-1)){
                temp[(int)k++]=arr[(int)i++];
            }
            while(j<=right){
                temp[(int)k++]=arr[(int)j++];
            }
        
        for(long p=left;p<=right;p++){
            arr[(int)p]=temp[(int)p];
        }
        return count;
    }
        
    }
