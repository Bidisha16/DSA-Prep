https://practice.geeksforgeeks.org/problems/minimum-sum-partition3317/1

class Solution
{
    

	public int minDifference(int arr[], int n) 
	{ 
	    // Your code goes here
	    int sum=0;
	    for(int i=0;i<n;i++){
	        sum+=arr[i];
	    }
	    int min=0;
	    min=subsetSum(arr, sum, n);
	   
	    return min;
	} 
	public int subsetSum(int arr[], int sum, int n){
	    boolean[][] dp=new boolean[n+1][sum+1];
	    for(int i=0;i<n+1;i++){
	        dp[i][0]=true;
	    }
	    for(int j=1;j<sum+1;j++){
	        dp[0][j]=false;
	    }
	    for(int i=1;i<n+1;i++){
	        for(int j=1;j<sum+1;j++){
	            if(arr[i-1]<=j){
	                dp[i][j]=dp[i-1][j] || dp[i-1][j-arr[i-1]];
	            }else{
	                dp[i][j]=dp[i-1][j];
	            }
	        }
	    }
	    int len=sum/2+1;
	    int[] s1=new int[len];
	    int k=0;
	    for(int j=0;j<len;j++){
	        if(dp[n][j]==true){
	            s1[k]=j;
	        }  
	        k++;
	        
	    }
	    int min=Integer.MAX_VALUE;
	    for(int i=0;i<len;i++){
	        min=Math.min(min,sum-2*s1[i]);
	    }
	    return min;
	    
	}
}
