https://practice.geeksforgeeks.org/problems/detect-cycle-in-an-undirected-graph/1
using bfs

class Node{
    int first;
    int second;
    public Node(int first,int second){
        this.first=first;
        this.second=second;
    }
}
class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        boolean[] vis=new boolean[V];
        for(int i=0;i<V;i++){
            if(vis[i]==false){
                 if(isCycleBfs(i, vis, adj)){
                     return true;
                 }
            }
        }
        return false;
    }
    public boolean isCycleBfs(int start, boolean[] vis, ArrayList<ArrayList<Integer>> adj){
        Queue<Node> q=new LinkedList<>();
        q.add(new Node(start,-1));
        vis[start]=true;
        while(!q.isEmpty()){
            int node=q.peek().first;
            int parent=q.peek().second;
            q.remove();
            for(Integer itr:adj.get(node)){
                if(vis[itr]==false){
                    q.add(new Node(itr,node));
                    vis[itr]=true;
                }else if(parent!=itr){
                    return true;
                }
            }
        }
        
        return false;
    }
}

using dfs
class Solution {
    // Function to detect cycle in an undirected graph.
    public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        boolean[] vis=new boolean[V];
        for(int i=0;i<V;i++){
            if(vis[i]==false){
                 if(isCycleDfs(i, vis, -1, adj)){
                     return true;
                 }
            }
        }
        return false;
    }
    public boolean isCycleDfs(int start, boolean[] vis, int parent, ArrayList<ArrayList<Integer>> adj){
        vis[start]=true;
        for(Integer itr:adj.get(start)){
            if(vis[itr]==false){
                if(isCycleDfs(itr, vis, start, adj)){
                    return true;
                }
            } 
            else if(itr!=parent){
                return true;
            }
        }
        return false;
    }
}
