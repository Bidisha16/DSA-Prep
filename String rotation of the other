/*https://www.geeksforgeeks.org/a-program-to-check-if-strings-are-rotations-of-each-other/ */
first approach
time complexity O(n*n)

public class HelloWorld{
    static void rotation(String str1, String str2){
        String str=str1+str1;
        if(str.contains(str2) && str1.length()==str2.length()){
            System.out.println("Strings are rotations of each other");
        }
        else{
            System.out.println("Strings are not rotations of each other");
        }
    }
     public static void main(String []args){
        String str1="ABCD";
        String str2="CDAB";
        rotation(str1,str2);
     }
}
Better approach-

import java.util.*;
public class HelloWorld{
    static boolean rotation(String str1, String str2){
        Queue<Character> q1= new LinkedList<>();
        Queue<Character> q2= new LinkedList<>();
        int m=str1.length();
        int n=str2.length();
        if(m!=n){
            return false;
        }
        
        for(int i=0;i<m;i++){
            char c=str1.charAt(i);
            q1.add(c);
        }
        for(int i=0;i<n;i++){
            char c=str2.charAt(i);
            q2.add(c);
        }
        while(n>0){
            n--;
            char c=q2.poll();
            q2.add(c);
            if(q2.equals(q1)){
                return true;
            }
        }
        return false;
    }
     public static void main(String []args){
         String str1="ABCD";
         String str2="CDAB";
         if(rotation(str1,str2)){
             System.out.println("it is a rotation");
         }
         else{
             System.out.println("it is not a rotation");
         }
     }
}
