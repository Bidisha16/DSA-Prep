https://practice.geeksforgeeks.org/problems/minimum-spanning-tree/1
PRIMS ALGO
class Node implements Comparator<Node>{
    private int Vertex;
    private int weight;
    Node(int Vertex, int weight){
        this.Vertex=Vertex;
        this.weight=weight;
    }
    Node(){ };
    int getV(){
        return Vertex;
    }
    int getWeight(){
        return weight;
    }
    public int compare(Node n1,Node n2){
        if(n1.weight<n2.weight){
            return -1;
        }
        if(n1.weight>n2.weight){
            return 1;
        }
        return 0;
    }
}

class Solution
{
    //Function to find sum of weights of edges of the Minimum Spanning Tree.
    static int spanningTree(int V, ArrayList<ArrayList<ArrayList<Integer>>> adj) 
    {
        // Add your code here
        int sum=0;
        int[] dis=new int[V];
        int[] parent=new int[V];
        boolean[] mst=new boolean[V];
        Arrays.fill(dis, Integer.MAX_VALUE);
        Arrays.fill(parent, -1);
        Arrays.fill(mst, false);
        dis[0]=0;
        PriorityQueue<Node> pq= new PriorityQueue<Node>(V, new Node());
        pq.add(new Node(0, dis[0]));
        while(!pq.isEmpty()){
            Node node=pq.poll();
            mst[node.getV()]=true;
            for(ArrayList<Integer> itr: adj.get(node.getV())){
                int vertex=itr.get(0);
                 int w=itr.get(1);
                if(mst[vertex]==false && w<dis[vertex]){
                    dis[vertex]=w;
                    
                    pq.add(new Node(vertex, dis[vertex]));
                }
                
            }
        }  
        for(int i:dis){
            sum+=i;
        }
        return sum;
    }
}
