https://practice.geeksforgeeks.org/problems/topological-sort/1

using dfs
class Solution
{
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        // add your code here
        int[] vis=new int[V];
        int[] res=new int[V];
        Stack<Integer> st=new Stack<>();
        Arrays.fill(vis,-1);
        for(int i=0;i<V;i++){
            if(vis[i]==-1){
                topoSortDfs(i,vis,adj,st);
            }
        }
        int i=0;
        while(!st.isEmpty()){
            res[i]=st.pop();
            i++;
        }
        return res;
    }
    public static void topoSortDfs(int node, int[] vis, ArrayList<ArrayList<Integer>> adj,Stack<Integer> st){
        vis[node]=1;
        for(Integer itr:adj.get(node)){
            if(vis[itr]==-1){
                topoSortDfs(itr,vis,adj,st);
            }
        }
        st.push(node);
        return;
    }
}

using bfs
class Solution
{
    //Function to return list containing vertices in Topological order. 
    static int[] topoSort(int V, ArrayList<ArrayList<Integer>> adj) 
    {
        // add your code here
        int[] vis=new int[V];
        int[] res=new int[V];
        int[] indegree=new int[V];
        Arrays.fill(vis,-1);
        Arrays.fill(indegree,0);
        for(int i=0;i<V;i++){
            for(Integer itr:adj.get(i)){
                indegree[itr]++;
            }
        }
    
        topoSortBfs(res,vis,adj,indegree);
     
        return res;
    }
    public static void topoSortBfs(int[] res, int[] vis, ArrayList<ArrayList<Integer>> adj,int[] indegree){
        Queue<Integer> q=new LinkedList<>();
        int n=indegree.length;
        for(int i=0;i<n;i++){
            if(indegree[i]==0){
                q.add(i);
            }
        }
        int p=0;
        while(!q.isEmpty()){
            int node=q.poll();
            
            res[p]=node;
            p++;
            for(Integer itr:adj.get(node)){
                indegree[itr]--;
                if(indegree[itr]==0){
                    q.add(itr);
                }
            }
        }
        
    }
}

